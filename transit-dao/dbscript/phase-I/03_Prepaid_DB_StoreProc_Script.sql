--------------------------------------------------------
-- sp_InactiveTranaction
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE sp_InactiveTranaction ( 
    CUR_OUTPUT OUT SYS_REFCURSOR
   )
	AS
	BEGIN

		OPEN CUR_OUTPUT FOR 

		Select P.PARTNER_ID PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_NUMBER ACCOUNT_NUMBER,CA.AVAILABLE_BALANCE AVAILABLE_BALANCE,FC.FEE_SHORT_CODE FEE_SHORT_CODE,FPV.DOM_FIXED_FEE INACTIVITY_FEE,CUST.FIRST_NAME FIRST_NAME,CUST.EMAIL EMAIL
		from CUSTOMER_TRANSACTION CT,CUSTOMER_ACCOUNT CA,CUSTOMER CUST,PARTNER P,FEE_PROGRAM FP, FEE_PROGRAM_VALUE FPV, FEE_CODE FC
		WHERE CT.ACCOUNT_ID = CA.Customer_Account_id
		AND CA.PARTNER_ID=P.PARTNER_ID 
		 AND FPV.FEE_CODE=FC.FEE_CODE 
		 AND CA.CUSTOMER_ID = CUST.CUSTOMER_ID
		 AND CA.ACCOUNT_PROGRAM_ID=FP.ACCOUNT_PROGRAM_ID 
		 AND FP.FEE_PROGRAM_ID=FPV.FEE_PROGRAM_ID 
		 AND FC.FEE_SHORT_CODE='ACCOUNT_INACTIVITY_FEE' 
		 AND CA.INACTIVITY_PERIOD>0 
		 AND CT.TXN_CODE NOT IN ('ACCOUNT_INACTIVITY_FEE','CARD_INACTIVITY_FEE') 
		 AND CA.INACTIVE_PERIOD_DURATION like 'DAILY'
		 AND CA.AVAILABLE_BALANCE>0
		 AND CT.ACCOUNT_ID NOT IN (Select ACCOUNT_ID from CUSTOMER_TRANSACTION where TXN_CODE IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE')
		  Group By ACCOUNT_ID
		 Having MAX(TXN_TIME)>(sysdate-1) AND MAX(TXN_TIME)<sysdate)
		 GROUP BY  CA.INACTIVITY_PERIOD,P.PARTNER_ID ,CA.CUSTOMER_ACCOUNT_ID ,CA.ACCOUNT_NUMBER, CA.AVAILABLE_BALANCE ,FC.FEE_SHORT_CODE ,FPV.DOM_FIXED_FEE,CUST.FIRST_NAME,CUST.EMAIL
		 Having (trunc(months_between(sysdate,MAX(CT.TXN_TIME))/12) *12) + trunc(mod(months_between(sysdate,MAX(CT.TXN_TIME)),12))>=CA.INACTIVITY_PERIOD
		 
		UNION ALL 
  
		Select P.PARTNER_ID PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_NUMBER ACCOUNT_NUMBER,CA.AVAILABLE_BALANCE AVAILABLE_BALANCE,FC.FEE_SHORT_CODE FEE_SHORT_CODE,FPV.DOM_FIXED_FEE INACTIVITY_FEE,CUST.FIRST_NAME FIRST_NAME,CUST.EMAIL EMAIL
		from CUSTOMER_TRANSACTION CT,CUSTOMER_ACCOUNT CA,CUSTOMER CUST,PARTNER P,FEE_PROGRAM FP, FEE_PROGRAM_VALUE FPV, FEE_CODE FC
		WHERE CT.ACCOUNT_ID = CA.Customer_Account_id
		AND CA.PARTNER_ID=P.PARTNER_ID 
		 AND FPV.FEE_CODE=FC.FEE_CODE 
		 AND CA.CUSTOMER_ID = CUST.CUSTOMER_ID
		 AND CA.ACCOUNT_PROGRAM_ID=FP.ACCOUNT_PROGRAM_ID 
		 AND FP.FEE_PROGRAM_ID=FPV.FEE_PROGRAM_ID 
		 AND FC.FEE_SHORT_CODE='ACCOUNT_INACTIVITY_FEE' 
		 AND CA.INACTIVITY_PERIOD>0 
		 AND CT.TXN_CODE NOT IN ('ACCOUNT_INACTIVITY_FEE','CARD_INACTIVITY_FEE') 
		 AND CA.INACTIVE_PERIOD_DURATION like 'WEEKLY'
		 AND CA.AVAILABLE_BALANCE>0
		 AND CT.ACCOUNT_ID NOT IN (Select ACCOUNT_ID from CUSTOMER_TRANSACTION where TXN_CODE IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE')
		  Group By ACCOUNT_ID
		 Having MAX(TXN_TIME)>(sysdate-7) AND MAX(TXN_TIME)<sysdate)
		 GROUP BY  CA.INACTIVITY_PERIOD,P.PARTNER_ID ,CA.CUSTOMER_ACCOUNT_ID ,CA.ACCOUNT_NUMBER, CA.AVAILABLE_BALANCE ,FC.FEE_SHORT_CODE ,FPV.DOM_FIXED_FEE,CUST.FIRST_NAME,CUST.EMAIL
		 Having (trunc(months_between(sysdate,MAX(CT.TXN_TIME))/12) *12) + trunc(mod(months_between(sysdate,MAX(CT.TXN_TIME)),12))>=CA.INACTIVITY_PERIOD

 
		UNION ALL

		Select P.PARTNER_ID PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_NUMBER ACCOUNT_NUMBER,CA.AVAILABLE_BALANCE AVAILABLE_BALANCE,FC.FEE_SHORT_CODE FEE_SHORT_CODE,FPV.DOM_FIXED_FEE INACTIVITY_FEE,CUST.FIRST_NAME FIRST_NAME,CUST.EMAIL EMAIL
		from CUSTOMER_TRANSACTION CT,CUSTOMER_ACCOUNT CA,CUSTOMER CUST,PARTNER P,FEE_PROGRAM FP, FEE_PROGRAM_VALUE FPV, FEE_CODE FC
		WHERE CT.ACCOUNT_ID = CA.Customer_Account_id
		AND CA.PARTNER_ID=P.PARTNER_ID 
		 AND FPV.FEE_CODE=FC.FEE_CODE 
		 AND CA.CUSTOMER_ID = CUST.CUSTOMER_ID
		 AND CA.ACCOUNT_PROGRAM_ID=FP.ACCOUNT_PROGRAM_ID 
		 AND FP.FEE_PROGRAM_ID=FPV.FEE_PROGRAM_ID 
		 AND FC.FEE_SHORT_CODE='ACCOUNT_INACTIVITY_FEE' 
		 AND CA.INACTIVITY_PERIOD>0 
		 AND CT.TXN_CODE NOT IN ('ACCOUNT_INACTIVITY_FEE','CARD_INACTIVITY_FEE') 
		 AND CA.INACTIVE_PERIOD_DURATION like 'MONTHLY'
		 AND CA.AVAILABLE_BALANCE>0
		 AND CT.ACCOUNT_ID NOT IN (Select ACCOUNT_ID from CUSTOMER_TRANSACTION where TXN_CODE IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE')
		  Group By ACCOUNT_ID
		 Having MAX(TXN_TIME)>(sysdate-30) AND MAX(TXN_TIME)<sysdate)
		 GROUP BY  CA.INACTIVITY_PERIOD,P.PARTNER_ID ,CA.CUSTOMER_ACCOUNT_ID ,CA.ACCOUNT_NUMBER, CA.AVAILABLE_BALANCE ,FC.FEE_SHORT_CODE ,FPV.DOM_FIXED_FEE,CUST.FIRST_NAME,CUST.EMAIL
		 Having (trunc(months_between(sysdate,MAX(CT.TXN_TIME))/12) *12) + trunc(mod(months_between(sysdate,MAX(CT.TXN_TIME)),12))>=CA.INACTIVITY_PERIOD;
		 
	END;
/

--------------------------------------------------------
-- sp_InactiveCardTranaction
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE sp_InactiveCardTranaction ( 
    CUR_OUTPUT OUT SYS_REFCURSOR
   )
AS
BEGIN

OPEN CUR_OUTPUT FOR 

	select distinct * from (
	
	 SELECT 
	P.PARTNER_ID PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_CURRENCY ACCOUNT_CURRENCY,CA.AVAILABLE_BALANCE AVAILABLE_BALANCE,C.CARD_ID CARD_ID,FC.FEE_SHORT_CODE FEE_SHORT_CODE,FPV.DOM_FIXED_FEE INACTIVITY_FEE,CUST.FIRST_NAME FIRST_NAME,CUST.EMAIL EMAIL,C.CARD_NUMBER CARD_NUMBER
	FROM CARD C,CUSTOMER CUST,CUSTOMER_ACCOUNT CA, PARTNER P,CUSTOMER_TRANSACTION CT,FEE_PROGRAM FP, FEE_PROGRAM_VALUE FPV, FEE_CODE FC
	 WHERE C.ACCOUNT_ID=CA.CUSTOMER_ACCOUNT_ID
	 AND CA.PARTNER_ID=P.PARTNER_ID 
	 AND CA.CUSTOMER_ID = CUST.CUSTOMER_ID
	 AND C.CARD_ID = CT.CARD_ID
	 AND FPV.FEE_CODE=FC.FEE_CODE 
	 AND CA.ACCOUNT_PROGRAM_ID=FP.ACCOUNT_PROGRAM_ID 
	 AND FP.FEE_PROGRAM_ID=FPV.FEE_PROGRAM_ID 
	 AND FC.FEE_SHORT_CODE='CARD_INACTIVITY_FEE' 
	 AND C.ACCOUNT_ID = CT.ACCOUNT_ID 
	 AND CA.CARD_INACTIVITY_PERIOD>0 
	 AND CT.TXN_CODE NOT IN ('CARD_INACTIVITY_FEE', 'ACCOUNT_INACTIVITY_FEE') 
	 AND CA.CARD_INACTIVE_PERIOD_DURATION like 'DAILY'
	 AND CA.AVAILABLE_BALANCE>0
	 AND CT.CARD_ID NOT IN (Select  decode(CARD_ID, null, -1, CARD_ID) from CUSTOMER_TRANSACTION where TXN_CODE IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE')
	 Group By CARD_ID
	 Having MAX(TXN_TIME)>sysdate-1 AND MAX(TXN_TIME)<sysdate)
	 GROUP BY  P.PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_CURRENCY,CA.AVAILABLE_BALANCE,CA.CARD_INACTIVE_PERIOD_DURATION,CA.CARD_INACTIVITY_PERIOD,FC.FEE_CODE,FC.FEE_SHORT_CODE,FPV.DOM_FIXED_FEE,C.CARD_ID,CUST.FIRST_NAME,CUST.EMAIL,C.CARD_NUMBER
	 Having (trunc(months_between(sysdate,MAX(CT.TXN_TIME))/12) *12) + trunc(mod(months_between(sysdate,MAX(CT.TXN_TIME)),12))>=CARD_INACTIVITY_PERIOD
	 
	UNION ALL 
	  
	SELECT 
	P.PARTNER_ID PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_CURRENCY ACCOUNT_CURRENCY,CA.AVAILABLE_BALANCE AVAILABLE_BALANCE,C.CARD_ID CARD_ID,FC.FEE_SHORT_CODE FEE_SHORT_CODE,FPV.DOM_FIXED_FEE INACTIVITY_FEE,CUST.FIRST_NAME FIRST_NAME,CUST.EMAIL EMAIL,C.CARD_NUMBER CARD_NUMBER
	FROM CARD C,CUSTOMER CUST,CUSTOMER_ACCOUNT CA, PARTNER P,CUSTOMER_TRANSACTION CT,FEE_PROGRAM FP, FEE_PROGRAM_VALUE FPV, FEE_CODE FC
	 WHERE C.ACCOUNT_ID=CA.CUSTOMER_ACCOUNT_ID
	 AND CA.PARTNER_ID=P.PARTNER_ID 
	 AND CA.CUSTOMER_ID = CUST.CUSTOMER_ID
	 AND C.CARD_ID = CT.CARD_ID
	 AND FPV.FEE_CODE=FC.FEE_CODE 
	 AND CA.ACCOUNT_PROGRAM_ID=FP.ACCOUNT_PROGRAM_ID 
	 AND FP.FEE_PROGRAM_ID=FPV.FEE_PROGRAM_ID 
	 AND FC.FEE_SHORT_CODE='CARD_INACTIVITY_FEE' 
	 AND C.ACCOUNT_ID = CT.ACCOUNT_ID 
	 AND CA.CARD_INACTIVITY_PERIOD>0 
	 AND CT.TXN_CODE NOT IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE') 
	 AND CA.CARD_INACTIVE_PERIOD_DURATION like 'WEEKLY'
	 AND CA.AVAILABLE_BALANCE>0
	 AND CT.CARD_ID NOT IN (Select decode(CARD_ID, null, -1, CARD_ID) from CUSTOMER_TRANSACTION where TXN_CODE IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE')
	 Group By CARD_ID
	 Having MAX(TXN_TIME)>sysdate-7 AND MAX(TXN_TIME)<sysdate)
	 GROUP BY  P.PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_CURRENCY,CA.AVAILABLE_BALANCE,CA.CARD_INACTIVE_PERIOD_DURATION,CA.CARD_INACTIVITY_PERIOD,FC.FEE_CODE,FC.FEE_SHORT_CODE,FPV.DOM_FIXED_FEE,C.CARD_ID,CUST.FIRST_NAME,CUST.EMAIL,C.CARD_NUMBER
	 Having (trunc(months_between(sysdate,MAX(CT.TXN_TIME))/12) *12) + trunc(mod(months_between(sysdate,MAX(CT.TXN_TIME)),12))>=CARD_INACTIVITY_PERIOD
	 
	UNION ALL
	   
	SELECT
	P.PARTNER_ID PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_CURRENCY ACCOUNT_CURRENCY,CA.AVAILABLE_BALANCE AVAILABLE_BALANCE,C.CARD_ID CARD_ID,FC.FEE_SHORT_CODE FEE_SHORT_CODE,FPV.DOM_FIXED_FEE INACTIVITY_FEE,CUST.FIRST_NAME FIRST_NAME,CUST.EMAIL EMAIL,C.CARD_NUMBER CARD_NUMBER
	FROM CARD C,CUSTOMER CUST,CUSTOMER_ACCOUNT CA, PARTNER P,CUSTOMER_TRANSACTION CT,FEE_PROGRAM FP, FEE_PROGRAM_VALUE FPV, FEE_CODE FC
	 WHERE C.ACCOUNT_ID=CA.CUSTOMER_ACCOUNT_ID
	 AND CA.PARTNER_ID=P.PARTNER_ID 
	 AND CA.CUSTOMER_ID = CUST.CUSTOMER_ID
	 AND C.CARD_ID = CT.CARD_ID
	 AND FPV.FEE_CODE=FC.FEE_CODE 
	 AND CA.ACCOUNT_PROGRAM_ID=FP.ACCOUNT_PROGRAM_ID 
	 AND FP.FEE_PROGRAM_ID=FPV.FEE_PROGRAM_ID 
	 AND FC.FEE_SHORT_CODE='CARD_INACTIVITY_FEE' 
	 AND C.ACCOUNT_ID = CT.ACCOUNT_ID 
	 AND CA.CARD_INACTIVITY_PERIOD>0 
	 AND CT.TXN_CODE NOT IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE') 
	 AND CA.CARD_INACTIVE_PERIOD_DURATION like 'MONTHLY'
	 AND CA.AVAILABLE_BALANCE>0
	 AND CT.CARD_ID NOT IN (Select  decode(CARD_ID, null, -1, CARD_ID) from CUSTOMER_TRANSACTION where TXN_CODE IN ('CARD_INACTIVITY_FEE','ACCOUNT_INACTIVITY_FEE')
	 Group By CARD_ID
	 Having MAX(TXN_TIME)>sysdate-31 AND MAX(TXN_TIME)<sysdate)
	 GROUP BY  P.PARTNER_ID,CA.CUSTOMER_ACCOUNT_ID,CA.ACCOUNT_CURRENCY,CA.AVAILABLE_BALANCE,CA.CARD_INACTIVE_PERIOD_DURATION,CA.CARD_INACTIVITY_PERIOD,FC.FEE_CODE,FC.FEE_SHORT_CODE,FPV.DOM_FIXED_FEE,C.CARD_ID,CUST.FIRST_NAME,CUST.EMAIL,C.CARD_NUMBER
	 Having (trunc(months_between(sysdate,MAX(CT.TXN_TIME))/12) *12) + trunc(mod(months_between(sysdate,MAX(CT.TXN_TIME)),12))>=CARD_INACTIVITY_PERIOD
	 )   ;
	END;	
/