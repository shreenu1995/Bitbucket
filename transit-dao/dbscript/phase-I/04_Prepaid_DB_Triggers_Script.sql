--------------------------------------------------------
--  File created - Friday-February-06-2015   
--------------------------------------------------------
DROP TRIGGER "AGENT_BALANCE_UPDATE";
DROP TRIGGER "AGENT_ACCOUNT_HISTORY";
DROP TRIGGER "AGENT_TRANSACTION_SUMMARY";
DROP TRIGGER "CUSTOMER_BALANCE_UPDATE";
DROP TRIGGER "CUSTOMER_ACCOUNT_HISTORY";
DROP TRIGGER "CUSTOMER_TRANSACTION_SUMMARY";
DROP TRIGGER "PARTNER_BALANCE_UPDATE";
DROP TRIGGER "PARTNER_ACCOUNT_HISTORY";
DROP TRIGGER "PROGRAM_MANAGER_BALANCE_UPDATE";
DROP TRIGGER "PM_ACCOUNT_HISTORY";
DROP TRIGGER "PREAUTH_BALANCE_UPDATE";
DROP TRIGGER "CARD_HISTORY";
DROP TRIGGER "ADMIN_USER_HISTORY";
DROP TRIGGER "AGENT_USER_HISTORY";

--------------------------------------------------------
--  DDL for Trigger AGENT_BALANCE_UPDATE
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "AGENT_BALANCE_UPDATE" 
AFTER INSERT
	ON AGENT_TRANSACTION
	FOR EACH ROW
	DECLARE
  
	TXN_TYP AGENT_TRANSACTION.TXN_TYPE%TYPE := :new.TXN_TYPE;
	TXN_COD AGENT_TRANSACTION.TXN_CODE%TYPE := :new.TXN_CODE;
	TXN_STATUS AGENT_TRANSACTION.TXN_STATUS%TYPE := :new.TXN_STATUS;
	AMOUNT AGENT_TRANSACTION.TXN_AMOUNT%TYPE := :new.TXN_AMOUNT;
  	TXN_NUMBER AGENT_TRANSACTION.TXN_NUMBER%TYPE := :new.TXN_NUMBER;

BEGIN   

	IF TXN_TYP = 'CREDIT' AND TXN_STATUS = 'EXECUTED' THEN
	
		IF TXN_COD = 'LOADCARDREVERSAL' OR TXN_COD = 'AGENTLOADCARDREVERSAL' OR TXN_COD = 'FEEREVERSAL' OR TXN_COD = 'MANUAL_AGENT_CREDIT' OR TXN_COD = 'MANUAL_CUSTOMER_DEBIT' OR TXN_COD = 'ADMIN_UPLOAD_FUNDS_TO_AGENT' OR TXN_COD = 'SYSTEM_UPLOAD_FUNDS_TO_AGENT' THEN  
          
			UPDATE AGENT_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) + AMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) + AMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
				WHERE AGENT_ACCOUNT_ID = :new.ACCOUNT_ID ;       
		   		   
		END IF;
				
	END IF;
	
	IF TXN_TYP = 'DEBIT' AND TXN_STATUS = 'EXECUTED' THEN
	
		IF TXN_COD = 'ADMINLOADCARD' OR TXN_COD = 'AGENTLOADCARD' OR TXN_COD = 'LOADCARDFEE' OR TXN_COD = 'MANUAL_AGENT_DEBIT' OR TXN_COD = 'MANUAL_CUSTOMER_CREDIT' OR TXN_COD = 'ISSUECARDFEE' THEN
        
			UPDATE AGENT_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) - AMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - AMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
				WHERE AGENT_ACCOUNT_ID = :new.ACCOUNT_ID;
		  
		END IF;	
    
    	IF TXN_COD = 'SEND_FUNDS_TO_BANK_ACCOUNT_EFT' OR TXN_COD = 'SEND_FUNDS_BY_CHEQUE_TO_BANK' THEN  
        
      		UPDATE AGENT_ACCOUNT SET CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - AMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
				WHERE AGENT_ACCOUNT_ID = :new.ACCOUNT_ID;
                
     	END IF;
	
	END IF;

END;
/

ALTER TRIGGER "AGENT_BALANCE_UPDATE" ENABLE;

--------------------------------------------------------
--  DDL for Trigger AGENT_ACCOUNT_HISTORY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "AGENT_ACCOUNT_HISTORY" 
AFTER INSERT OR UPDATE
   ON AGENT_ACCOUNT
   FOR EACH ROW
   DECLARE
   
	BEGIN
	  
		INSERT INTO AGENT_ACCOUNT_H (AGENT_HISTORY_ID,AGENT_ACCOUNT_ID,AGENT_ID,ACCOUNT_NUMBER,AVAILABLE_BALANCE,CURRENT_BALANCE,STATUS,REASON,CREATED_DATE,UPDATED_DATE,CREATED_BY,UPDATED_BY,AUTO_REPLENISH,PREFUNDING,LAST_TXN_NUMBER,CURRENCY,TIMEZONE)
			VALUES(SEQ_AGENT_ACCOUNT_H.nextval,:new.AGENT_ACCOUNT_ID,:new.AGENT_ID,:new.ACCOUNT_NUMBER,:new.AVAILABLE_BALANCE,:new.CURRENT_BALANCE,:new.STATUS,:new.REASON,:new.CREATED_DATE,:new.UPDATED_DATE,:new.CREATED_BY,:new.UPDATED_BY,:new.AUTO_REPLENISH,:new.PREFUNDING,:new.LAST_TXN_NUMBER,:new.CURRENCY,:new.TIMEZONE);
	
	END;
/

ALTER TRIGGER "AGENT_ACCOUNT_HISTORY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger AGENT_TRANSACTION_SUMMARY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "AGENT_TRANSACTION_SUMMARY" 
AFTER INSERT ON AGENT_TRANSACTION
FOR EACH ROW
  DECLARE
    SDAY AGENT_TRANSACTION_SUMMARY.DAY%TYPE;           
    SMONTH AGENT_TRANSACTION_SUMMARY.MONTH%TYPE; 
    SHOUR AGENT_TRANSACTION_SUMMARY.HOUR%TYPE; 
    SWEEK AGENT_TRANSACTION_SUMMARY.WEEK%TYPE; 
    CURRENTDAY VARCHAR2(20);
    CURRENTMONTH VARCHAR2(20);
    CURRENTHOUR VARCHAR2(20);
    CURRENTWEEK VARCHAR2(20);
    totalrow number;
    DECODE_TXNCODE AGENT_TRANSACTION.TXN_CODE%TYPE;
    ACCOUNTID AGENT_TRANSACTION.ACCOUNT_ID%TYPE := :new.ACCOUNT_ID;
    TXNCODE AGENT_TRANSACTION.TXN_CODE%TYPE := :new.TXN_CODE;
    AMOUNT AGENT_TRANSACTION.TXN_AMOUNT%TYPE := :new.TXN_AMOUNT;
  
  BEGIN  
  
	SELECT TO_CHAR(SYSDATE, 'MM-DD-YYYY W'),TO_CHAR(SYSDATE,'MM-DD-YYYY HH24'),TO_CHAR(SYSDATE,'MM-DD-YYYY'),TO_CHAR(SYSDATE,'MM-YYYY') INTO CURRENTWEEK ,CURRENTHOUR, CURRENTDAY,CURRENTMONTH FROM DUAL;
  
  SELECT DECODE((:NEW.TXN_CODE),'AGENTLOADCARD','LOADCARD','ADMINLOADCARD','LOADCARD',:NEW.TXN_CODE) INTO DECODE_TXNCODE from dual;
  
	select count(*) into totalrow from AGENT_TRANSACTION_SUMMARY where ACCOUNT_ID = :new.ACCOUNT_ID AND TXN_CODE = DECODE_TXNCODE ;
                
	if totalrow = 0 then
		INSERT INTO AGENT_TRANSACTION_SUMMARY(TRANSACTION_LIMIT_ID,ACCOUNT_ID,HOUR,HOUR_COUNT,HOUR_AMOUNT,WEEK,WEEK_COUNT,WEEK_AMOUNT,DAY,DAY_COUNT,DAY_AMOUNT,MONTH,MONTH_COUNT,MONTH_AMOUNT,TXN_CODE) VALUES(SEQ_AGENT_TRANSACTION_LIMIT.nextval,ACCOUNTID,CURRENTHOUR,1,AMOUNT,CURRENTWEEK,1,AMOUNT,CURRENTDAY,1,AMOUNT,CURRENTMONTH,1,AMOUNT,DECODE_TXNCODE);  
	end if;
    
    IF totalrow != 0 THEN 
	       select month,day,hour, week into SMONTH,SDAY,SHOUR,SWEEK from AGENT_TRANSACTION_SUMMARY where ACCOUNT_ID = :new.ACCOUNT_ID AND TXN_CODE = DECODE_TXNCODE;
           
            IF SHOUR=CURRENTHOUR AND SDAY = CURRENTDAY AND SWEEK=CURRENTWEEK AND SMONTH = CURRENTMONTH THEN
            
                  UPDATE AGENT_TRANSACTION_SUMMARY SET HOUR_COUNT = HOUR_COUNT+1, HOUR_AMOUNT = HOUR_AMOUNT+AMOUNT, WEEK_COUNT=WEEK_COUNT+1 , WEEK_AMOUNT=WEEK_AMOUNT+AMOUNT, DAY_COUNT = DAY_COUNT +1,DAY_AMOUNT = DAY_AMOUNT +AMOUNT, MONTH_COUNT = MONTH_COUNT+1,MONTH_AMOUNT = MONTH_AMOUNT+AMOUNT WHERE ACCOUNT_ID = :new.ACCOUNT_ID and TXN_CODE = DECODE_TXNCODE ;
                  
            ELSIF SDAY = CURRENTDAY AND SWEEK=CURRENTWEEK AND SMONTH = CURRENTMONTH THEN
            
                  UPDATE AGENT_TRANSACTION_SUMMARY SET HOUR_COUNT = 1,HOUR_AMOUNT = AMOUNT,HOUR=CURRENTHOUR,WEEK_COUNT=WEEK_COUNT+1,WEEK_AMOUNT=WEEK_AMOUNT+AMOUNT, DAY_COUNT = DAY_COUNT +1, DAY_AMOUNT = DAY_AMOUNT +AMOUNT, MONTH_COUNT = MONTH_COUNT+1,MONTH_AMOUNT = MONTH_AMOUNT+AMOUNT WHERE ACCOUNT_ID = :new.ACCOUNT_ID and TXN_CODE = DECODE_TXNCODE ;  
                  
            ELSIF SWEEK=CURRENTWEEK AND SMONTH= CURRENTMONTH THEN
            
                   UPDATE AGENT_TRANSACTION_SUMMARY SET HOUR_COUNT = 1,HOUR_AMOUNT = AMOUNT,HOUR=CURRENTHOUR,WEEK_COUNT=WEEK_COUNT+1, WEEK_AMOUNT=WEEK_AMOUNT+AMOUNT, DAY = CURRENTDAY,DAY_COUNT=1,DAY_AMOUNT=AMOUNT,MONTH_COUNT = MONTH_COUNT+1,MONTH_AMOUNT = MONTH_AMOUNT+AMOUNT  WHERE ACCOUNT_ID = :new.ACCOUNT_ID and TXN_CODE = DECODE_TXNCODE;
                   
           ELSIF SMONTH= CURRENTMONTH THEN
           
                   UPDATE AGENT_TRANSACTION_SUMMARY SET HOUR_COUNT = 1,HOUR_AMOUNT = AMOUNT,HOUR=CURRENTHOUR,WEEK=CURRENTWEEK,WEEK_COUNT=1,WEEK_AMOUNT=AMOUNT, DAY = CURRENTDAY,DAY_COUNT=1,DAY_AMOUNT=AMOUNT,MONTH_COUNT = MONTH_COUNT+1,MONTH_AMOUNT = MONTH_AMOUNT+AMOUNT  WHERE ACCOUNT_ID = :new.ACCOUNT_ID and TXN_CODE = DECODE_TXNCODE;
           ELSE
              
               UPDATE AGENT_TRANSACTION_SUMMARY SET HOUR_COUNT = 1,HOUR_AMOUNT = AMOUNT,HOUR=CURRENTHOUR,WEEK=CURRENTWEEK,WEEK_COUNT=1,WEEK_AMOUNT=AMOUNT, DAY = CURRENTDAY,DAY_COUNT=1,DAY_AMOUNT=AMOUNT,MONTH = CURRENTMONTH,MONTH_COUNT = 1,MONTH_AMOUNT = AMOUNT  WHERE ACCOUNT_ID = :new.ACCOUNT_ID and TXN_CODE = DECODE_TXNCODE;
           
            END IF;
          
          END IF;
END;
/

ALTER TRIGGER "AGENT_TRANSACTION_SUMMARY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger CUSTOMER_BALANCE_UPDATE
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "CUSTOMER_BALANCE_UPDATE"
AFTER INSERT
   ON CUSTOMER_TRANSACTION
   FOR EACH ROW
   

DECLARE 
   TXN_TYP CUSTOMER_TRANSACTION.TXN_TYPE%TYPE := :new.TXN_TYPE;
   TXN_DESC CUSTOMER_TRANSACTION.TXN_DESC%TYPE := :NEW.TXN_DESC;
   TXN_COD CUSTOMER_TRANSACTION.TXN_CODE%TYPE := :new.TXN_CODE;
   TXN_STATUS CUSTOMER_TRANSACTION.TXN_STATUS%TYPE := :new.TXN_STATUS;
   TXNAMOUNT CUSTOMER_TRANSACTION.TXN_AMOUNT%TYPE := :new.TXN_AMOUNT;
   TXN_NUMBER CUSTOMER_TRANSACTION.TXN_NUMBER%TYPE := :new.TXN_NUMBER;
   TXNREF_NUM CUSTOMER_TRANSACTION.TXN_REF_NUM%TYPE := :NEW.TXN_REF_NUM;
   
BEGIN

	IF TXN_TYP = 'CREDIT' AND TXN_STATUS = 'EXECUTED' THEN
  
      IF TXN_COD = 'POS_REFUND' OR TXN_COD = 'ATM_DEPOSIT' OR TXN_COD = 'POS_ECOM_CREDIT' OR TXN_COD = 'AUTH_COMPLETION_CREDIT' OR TXN_COD = 'REVERSAL' OR TXN_COD = 'ACQUIRER_FEE' OR TXN_COD = 'ISSUER_FEE' AND TXNAMOUNT != 0 THEN
        
        UPDATE CUSTOMER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) + TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) + TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
          WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID ;          
       
        INSERT INTO ENTITY_TRANSACTION (ID,TXN_NUMBER,ACCOUNT_ID,ACCOUNT_TYPE,TXN_TYPE,TXN_STATUS,TXN_AMOUNT,TXN_CODE,TXN_DESC,TXN_REF_NUM,END_BALANCE,TXN_TIME,CREATED_BY)
          VALUES(SEQ_ENTITY_TRANSACTION.nextval,SEQ_ENTITY_TXN_NUMBER.nextval,:new.ACCOUNT_ID,'PARTNER_NETWORK_ACCOUNT','DEBIT',:new.TXN_STATUS,:new.TXN_AMOUNT,:new.TXN_CODE,:new.TXN_DESC,:new.TXN_REF_NUM,:new.END_BALANCE,sysdate,:new.TXN_CLIENT);
                
      END IF;
  
      IF TXN_COD = 'ADMINLOADCARD' OR TXN_COD = 'AGENTLOADCARD' OR TXN_COD = 'FEEREVERSAL' OR TXN_COD = 'MANUAL_CUSTOMER_CREDIT' OR TXN_COD = 'TRANSFER_FUNDS_TO_OWN_ACCOUNT'
        OR TXN_COD = 'TRANSFER_FUNDS_TO_OTHER_ACCOUNT' OR TXN_COD = 'CES_LOADCARD' OR TXN_COD = 'ISSUER_FEE_REVERSAL' THEN
        
        UPDATE CUSTOMER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) + TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) + TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
          WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID ;      
                
      END IF;
      
  	END IF;
	
  	IF TXN_TYP = 'DEBIT' AND TXN_STATUS = 'EXECUTED' THEN
  
      IF TXN_COD = 'POS_PURCHASE' OR TXN_COD = 'ATM_WITHDRAW' OR TXN_COD = 'AUTH_COMPLETION_DEBIT' OR TXN_COD = 'POS_PURCHASE_WITH_CASHBACK' OR TXN_COD = 'POS_ECOM_PURCHASE' OR TXN_COD = 'ACQUIRER_FEE' OR TXN_COD = 'REVERSAL' AND TXNAMOUNT != 0  THEN
          
      	UPDATE CUSTOMER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) - TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
          WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID ;
          
          
      INSERT INTO ENTITY_TRANSACTION (ID,TXN_NUMBER,ACCOUNT_ID,ACCOUNT_TYPE,TXN_TYPE,TXN_STATUS,TXN_AMOUNT,TXN_CODE,TXN_DESC,TXN_REF_NUM,END_BALANCE,TXN_TIME,CREATED_BY)
          VALUES(SEQ_ENTITY_TRANSACTION.nextval,SEQ_ENTITY_TXN_NUMBER.nextval,:new.ACCOUNT_ID,'PARTNER_NETWORK_ACCOUNT','CREDIT',:new.TXN_STATUS,:new.TXN_AMOUNT,:new.TXN_CODE,:new.TXN_DESC,:new.TXN_REF_NUM,:new.END_BALANCE,sysdate,:new.TXN_CLIENT);
      
      END IF;
      
      IF TXN_COD = 'ISSUER_FEE' AND TXNAMOUNT != 0 THEN
        
            UPDATE CUSTOMER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) - TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
              WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID ;
          
      INSERT INTO ENTITY_TRANSACTION (ID,TXN_NUMBER,ACCOUNT_ID,ACCOUNT_TYPE,TXN_TYPE,TXN_STATUS,TXN_AMOUNT,TXN_CODE,TXN_DESC,TXN_REF_NUM,END_BALANCE,TXN_TIME,CREATED_BY)
          VALUES(SEQ_ENTITY_TRANSACTION.nextval,SEQ_ENTITY_TXN_NUMBER.nextval,:new.ACCOUNT_ID,'PARTNER_REVENUE_ACCOUNT','CREDIT',:new.TXN_STATUS,:new.TXN_AMOUNT,:new.TXN_CODE,:new.TXN_DESC,:new.TXN_REF_NUM,:new.END_BALANCE,sysdate,:new.TXN_CLIENT);
      
      END IF;
      
      IF TXN_COD = 'LOADCARDREVERSAL' OR TXN_COD = 'AGENTLOADCARDREVERSAL' OR TXN_COD = 'LOADCARDFEE' OR TXN_COD = 'ISSUECARDFEE' OR TXN_COD = 'MANUAL_CUSTOMER_DEBIT' OR TXN_COD = 'TRANSFER_FUNDS_TO_OWN_ACCOUNT'
        OR TXN_COD = 'TRANSFER_FUNDS_TO_OTHER_ACCOUNT' OR TXN_COD='ACCOUNT_TO_ACCOUNT_TRANSFER_FEE' OR TXN_COD='ACCOUNT_CLOSURE_FEE' OR TXN_COD='CARD_INACTIVITY_FEE' OR TXN_COD='MAINTENANCE_FEE' OR TXN_COD = 'MONTHLY_FEE' OR TXN_COD = 'PERIODIC_FEE' OR TXN_COD = 'PIN_CHANGE_FEE' OR TXN_COD = 'CARD_REPLACEMENT_FEE'
        OR TXN_COD = 'CARD_ACTIVATION_FEE' OR TXN_COD = 'REISSUANCE_CARD_FEE' OR TXN_COD = 'CES_LOADCARDREVERSAL' OR TXN_COD = 'ACCOUNT_INACTIVITY_FEE' THEN  
        
      	UPDATE CUSTOMER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) - TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
          WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID ;
      
      END IF;    
      
     IF TXN_COD = 'SEND_FUNDS_TO_BANK_ACCOUNT_EFT' OR TXN_COD = 'SEND_FUNDS_BY_CHEQUE_TO_BANK' THEN  
        
     	UPDATE CUSTOMER_ACCOUNT SET  CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
          WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID ;   
          
      END IF;
      
  END IF;
  
END;
/

ALTER TRIGGER "CUSTOMER_BALANCE_UPDATE" ENABLE;

--------------------------------------------------------
--  DDL for Trigger CUSTOMER_ACCOUNT_HISTORY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "CUSTOMER_ACCOUNT_HISTORY" 
AFTER INSERT OR UPDATE
   ON CUSTOMER_ACCOUNT
   FOR EACH ROW
   DECLARE
   
	BEGIN
  
      INSERT INTO CUSTOMER_ACCOUNT_H (CUSTOMER_HISTORY_ID,CUSTOMER_ACCOUNT_ID,CUSTOMER_ID,ACCOUNT_NUMBER,ACCOUNT_PROGRAM_ID,FEE_PROGRAM_ID,AVAILABLE_BALANCE,CURRENT_BALANCE,ACCOUNT_STATUS,
          ACCOUNT_TYPE,LAST_TRANSACTION_DATE,ACCOUNT_INACTIVE_PERIOD,MAX_BALANCE_LIMIT,ACCOUNT_CURRENCY,FREE_ATM_CASH_WITHDRAWAL,FREE_ACCT_TO_ACCT_TRASFER,FREE_BALANCE_INQUIRY,
          FREE_FUND_TRNSFR_FROM_BANK,FREE_FUND_TRNSFR_TO_BANK,FREE_LOAD_TXN_THROUGH_AGENT,FREE_POS_TRANSACTION,REASON,CREATED_DATE,UPDATED_DATE,CREATED_BY,UPDATED_BY,LAST_TXN_NUMBER)
        VALUES(SEQ_CUSTOMER_ACCOUNT_H.nextval,:new.CUSTOMER_ACCOUNT_ID,:new.CUSTOMER_ID,:new.ACCOUNT_NUMBER,:new.ACCOUNT_PROGRAM_ID,:new.FEE_PROGRAM_ID,:new.AVAILABLE_BALANCE,
        :new.CURRENT_BALANCE,:new.ACCOUNT_STATUS,:new.ACCOUNT_TYPE,:new.LAST_TRANSACTION_DATE,:new.ACCOUNT_INACTIVE_PERIOD,:new.MAX_BALANCE_LIMIT,:new.ACCOUNT_CURRENCY,
        :new.FREE_ATM_CASH_WITHDRAWAL,:new.FREE_ACCT_TO_ACCT_TRASFER,:new.FREE_BALANCE_INQUIRY,:new.FREE_FUND_TRNSFR_FROM_BANK,:new.FREE_FUND_TRNSFR_TO_BANK,:new.FREE_LOAD_TXN_THROUGH_AGENT,
        :new.FREE_POS_TRANSACTION,:new.REASON,:new.CREATED_DATE,:new.UPDATED_DATE,:new.CREATED_BY,:new.UPDATED_BY,:new.LAST_TXN_NUMBER);
      
	END;
/

ALTER TRIGGER "CUSTOMER_ACCOUNT_HISTORY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger CUSTOMER_TRANSACTION_SUMMARY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "CUSTOMER_TRANSACTION_SUMMARY" 
AFTER INSERT ON CUSTOMER_TRANSACTION
FOR EACH ROW
  
  DECLARE
  
  CDAY CUSTOMER_TRANSACTION_SUMMARY.DAY%TYPE; 
  CMONTH CUSTOMER_TRANSACTION_SUMMARY.MONTH%TYPE;
  CURRENTDAY VARCHAR2(20);
  CURRENTMONTH VARCHAR2(20);
  TOTALROW number;
  DECODE_TXNCODE CUSTOMER_TRANSACTION.TXN_CODE%TYPE; 
  
  ACCOUNTID CUSTOMER_TRANSACTION.ACCOUNT_ID%TYPE := :NEW.ACCOUNT_ID;
  TXNCODE CUSTOMER_TRANSACTION.TXN_CODE%TYPE := :NEW.TXN_CODE;
  AMOUNT CUSTOMER_TRANSACTION.TXN_AMOUNT%TYPE := :NEW.TXN_AMOUNT;
  
  BEGIN
	SELECT TO_CHAR(SYSDATE,'MM-DD-YYYY'),TO_CHAR(SYSDATE,'MM-YYYY') INTO CURRENTDAY,CURRENTMONTH FROM DUAL;  
    
  SELECT DECODE((:NEW.TXN_CODE),'AGENTLOADCARD','LOADCARD','ADMINLOADCARD','LOADCARD','TRANSFER_FUNDS_TO_OWN_ACCOUNT','ACCOUNT_TO_ACCOUNT_TRANSFER','TRANSFER_FUNDS_TO_OTHER_ACCOUNT','ACCOUNT_TO_ACCOUNT_TRANSFER',
  'POS_PURCHASE','POS_TRANSACTIONS','POS_PURCHASE_WITH_CASHBACK','POS_TRANSACTIONS','POS_REFUND','POS_TRANSACTIONS','POS_ECOM_PURCHASE','POS_TRANSACTIONS','POS_ECOM_CREDIT','POS_TRANSACTIONS','POS_TRANSFER_BW_ACCOUNTS','POS_TRANSACTIONS',
  'ATM_WITHDRAW','ATM_TRANSACTIONS','ATM_DEPOSIT','ATM_TRANSACTIONS','ATM_TRANSFER_BW_ACCOUNTS','ATM_TRANSACTIONS', :NEW.TXN_CODE) INTO DECODE_TXNCODE from dual;
  
  SELECT COUNT (*)  INTO TOTALROW  FROM CUSTOMER_TRANSACTION_SUMMARY WHERE ACCOUNT_ID = :NEW.ACCOUNT_ID AND TXN_CODE = DECODE_TXNCODE;
  
      IF TOTALROW = 0 THEN
          INSERT INTO CUSTOMER_TRANSACTION_SUMMARY VALUES(SEQ_CUSTOMER_TRANSACTION_LIMIT.NEXTVAL,ACCOUNTID,CURRENTDAY,1,AMOUNT,CURRENTMONTH,1,AMOUNT,DECODE_TXNCODE);
      END IF;
    
      IF TOTALROW !=0 THEN 
          SELECT DAY,MONTH INTO CDAY,CMONTH  FROM CUSTOMER_TRANSACTION_SUMMARY WHERE ACCOUNT_ID = :NEW.ACCOUNT_ID AND TXN_CODE = DECODE_TXNCODE ;

          IF CDAY = CURRENTDAY THEN
            UPDATE CUSTOMER_TRANSACTION_SUMMARY SET DAY_COUNT = DAY_COUNT+1,DAY_AMOUNT = DAY_AMOUNT+AMOUNT,MONTH_COUNT = MONTH_COUNT+1,MONTH_AMOUNT = MONTH_AMOUNT+AMOUNT WHERE ACCOUNT_ID = :NEW.ACCOUNT_ID AND TXN_CODE = DECODE_TXNCODE;
          END IF;
        
          IF CDAY != CURRENTDAY AND CMONTH = CURRENTMONTH THEN
            UPDATE CUSTOMER_TRANSACTION_SUMMARY SET DAY = CURRENTDAY,DAY_COUNT = 1,DAY_AMOUNT =AMOUNT,MONTH_COUNT = MONTH_COUNT + 1,MONTH_AMOUNT = MONTH_AMOUNT + AMOUNT WHERE ACCOUNT_ID = :NEW.ACCOUNT_ID AND TXN_CODE = DECODE_TXNCODE;
          END IF;
        
          IF CMONTH != CURRENTMONTH THEN
            UPDATE CUSTOMER_TRANSACTION_SUMMARY SET DAY = CURRENTDAY, DAY_COUNT = 1,DAY_AMOUNT = AMOUNT, MONTH = CURRENTMONTH, MONTH_COUNT = 1, MONTH_AMOUNT = AMOUNT WHERE ACCOUNT_ID = :NEW.ACCOUNT_ID AND TXN_CODE = DECODE_TXNCODE;
          END IF;
          
      END IF;  
      
  END;
/

ALTER TRIGGER "CUSTOMER_TRANSACTION_SUMMARY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger PARTNER_BALANCE_UPDATE
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "PARTNER_BALANCE_UPDATE" 
AFTER INSERT
	ON ENTITY_TRANSACTION
	FOR EACH ROW
	
DECLARE
  
	TXN_TYP ENTITY_TRANSACTION.TXN_TYPE%TYPE := :new.TXN_TYPE;
	TXN_COD ENTITY_TRANSACTION.TXN_CODE%TYPE := :new.TXN_CODE;
	TXN_STATUS ENTITY_TRANSACTION.TXN_STATUS%TYPE := :new.TXN_STATUS;
	TXNAMOUNT ENTITY_TRANSACTION.TXN_AMOUNT%TYPE := :new.TXN_AMOUNT;
    TXN_NUMBER ENTITY_TRANSACTION.TXN_NUMBER%TYPE := :new.TXN_NUMBER;
    ACCOUNT_TYPE ENTITY_TRANSACTION.ACCOUNT_TYPE%TYPE := :new.ACCOUNT_TYPE;
  
BEGIN   

	IF TXN_TYP = 'DEBIT' AND TXN_STATUS = 'EXECUTED' THEN
	
		IF  TXN_COD = 'FEEREVERSAL' OR TXN_COD = 'ADMIN_UPLOAD_FUNDS_TO_AGENT' OR TXN_COD = 'SYSTEM_UPLOAD_FUNDS_TO_AGENT' OR TXN_COD = 'ISSUER_FEE_REVERSAL' THEN      
        
			UPDATE PARTNER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) -TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
				WHERE PARTNER_ACCOUNT_ID = :new.ACCOUNT_ID;
		  
		END IF;
		
		IF  TXN_COD = 'MANUAL_CUSTOMER_CREDIT' OR TXN_COD = 'MANUAL_AGENT_CREDIT' OR TXN_COD = 'MANUAL_PARTNER_CREDIT' OR TXN_COD = 'MANUAL_PARTNER_DEBIT' THEN      

			IF  ACCOUNT_TYPE = 'PARTNER_SYSTEM_ACCOUNT' OR ACCOUNT_TYPE = 'PARTNER_REVENUE_ACCOUNT' THEN 
      
				UPDATE PARTNER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) -TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
					WHERE PARTNER_ACCOUNT_ID = :new.ACCOUNT_ID;
				
			END IF;
				
		END IF;
    
	END IF;
	
	IF TXN_TYP = 'CREDIT' AND TXN_STATUS = 'EXECUTED' THEN
	
		IF TXN_COD = 'LOADCARDFEE' OR TXN_COD = 'ISSUECARDFEE' OR TXN_COD = 'ACCOUNT_TO_ACCOUNT_TRANSFER_FEE' OR TXN_COD = 'MAINTENANCE_FEE' OR TXN_COD = 'CARD_INACTIVITY_FEE' OR TXN_COD = 'CARD_ACTIVATION_FEE' OR TXN_COD = 'REISSUANCE_CARD_FEE'
		OR TXN_COD = 'MONTHLY_FEE' OR TXN_COD = 'PERIODIC_FEE' OR TXN_COD = 'PIN_CHANGE_FEE'  OR TXN_COD = 'ACCOUNT_INACTIVITY_FEE'  THEN		 
        
			UPDATE PARTNER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) + TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) + TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
       			WHERE PARTNER_ACCOUNT_ID = :new.ACCOUNT_ID;  
		  
		END IF;  
    
		IF TXN_COD = 'MANUAL_CUSTOMER_DEBIT' OR TXN_COD = 'MANUAL_AGENT_DEBIT' OR TXN_COD = 'MANUAL_PARTNER_DEBIT' OR TXN_COD = 'MANUAL_PARTNER_CREDIT' OR TXN_COD='ACCOUNT_INACTIVE_FEE' THEN 
      
      		IF  ACCOUNT_TYPE = 'PARTNER_SYSTEM_ACCOUNT' OR ACCOUNT_TYPE = 'PARTNER_REVENUE_ACCOUNT' THEN 
      
       			UPDATE PARTNER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) + TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) + TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
      				WHERE PARTNER_ACCOUNT_ID = :new.ACCOUNT_ID;  
		  
	 		END IF;
       
		END IF;
		  
	END IF;

END;
/

ALTER TRIGGER "PARTNER_BALANCE_UPDATE" ENABLE;

--------------------------------------------------------
--  DDL for Trigger PARTNER_ACCOUNT_HISTORY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "PARTNER_ACCOUNT_HISTORY" 
AFTER INSERT OR UPDATE
   ON PARTNER_ACCOUNT
   FOR EACH ROW
   DECLARE
   
BEGIN
  
	INSERT INTO PARTNER_ACCOUNT_H (PARTNER_HISTORY_ID,PARTNER_ACCOUNT_ID,PARTNER_ID,ACCOUNT_NUMBER,ACCOUNT_TYPE,AVAILABLE_BALANCE,CURRENT_BALANCE,STATUS,CREATED_DATE,UPDATED_DATE,CREATED_BY,UPDATED_BY,TXN_NUMBER)
		VALUES(SEQ_PARTNER_ACCOUNT_H.nextval,:new.PARTNER_ACCOUNT_ID,:new.PARTNER_ID,:new.ACCOUNT_NUMBER,:new.ACCOUNT_TYPE,:new.AVAILABLE_BALANCE,:new.CURRENT_BALANCE,:new.STATUS,:new.CREATED_DATE,:new.UPDATED_DATE,:new.CREATED_BY,:new.UPDATED_BY,:new.LAST_TXN_NUMBER);

END;
/

ALTER TRIGGER "PARTNER_ACCOUNT_HISTORY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger PROGRAM_MANAGER_BALANCE_UPDATE
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "PROGRAM_MANAGER_BALANCE_UPDATE" 
AFTER INSERT
	ON ENTITY_TRANSACTION
	FOR EACH ROW
	DECLARE
  
	TXN_TYP ENTITY_TRANSACTION.TXN_TYPE%TYPE := :new.TXN_TYPE;
	TXN_COD ENTITY_TRANSACTION.TXN_CODE%TYPE := :new.TXN_CODE;
	TXN_STATUS ENTITY_TRANSACTION.TXN_STATUS%TYPE := :new.TXN_STATUS;
	TXNAMOUNT ENTITY_TRANSACTION.TXN_AMOUNT%TYPE := :new.TXN_AMOUNT;
 	TXN_NUMBER ENTITY_TRANSACTION.TXN_NUMBER%TYPE := :new.TXN_NUMBER;
	ACCOUNT_TYPE ENTITY_TRANSACTION.ACCOUNT_TYPE%TYPE := :new.ACCOUNT_TYPE;
  
BEGIN   

	IF TXN_TYP = 'DEBIT' AND TXN_STATUS = 'EXECUTED' THEN	
	
		IF  TXN_COD = 'MANUAL_PARTNER_CREDIT' OR TXN_COD = 'MANUAL_CUSTOMER_CREDIT' OR TXN_COD = 'MANUAL_AGENT_CREDIT' THEN
      
    		IF  ACCOUNT_TYPE = 'PM_SYSTEM_ACCOUNT' THEN 
      
				UPDATE PROGRAM_MANAGER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) -TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) - TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
					WHERE ID = :new.ACCOUNT_ID;
				
       		END IF; 
		
    	END IF;
    
	END IF;
	
	IF TXN_TYP = 'CREDIT' AND TXN_STATUS = 'EXECUTED' THEN
	
		IF TXN_COD = 'MANUAL_PARTNER_DEBIT' OR TXN_COD = 'MANUAL_CUSTOMER_DEBIT' OR TXN_COD = 'MANUAL_AGENT_DEBIT' THEN
      
      		IF  ACCOUNT_TYPE = 'PM_SYSTEM_ACCOUNT' THEN 
        
        		UPDATE PROGRAM_MANAGER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) + TXNAMOUNT, CURRENT_BALANCE = (nvl(CURRENT_BALANCE,0)) + TXNAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
         		WHERE ID = :new.ACCOUNT_ID;  
        
      		END IF;
		
    	END IF;    
		
	END IF;

END;
/

ALTER TRIGGER "PROGRAM_MANAGER_BALANCE_UPDATE" ENABLE;

--------------------------------------------------------
--  DDL for Trigger PROGRAM_MANAGER_ACCOUNT_HISTORY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "PM_ACCOUNT_HISTORY" 
AFTER INSERT OR UPDATE
   ON PROGRAM_MANAGER_ACCOUNT
   FOR EACH ROW
   DECLARE
   
	BEGIN
	  
		INSERT INTO PROGRAM_MANAGER_ACCOUNT_H (PROGRAM_MANAGER_HISTORY_ID,PROGRAM_MANAGER_ACCOUNT_ID,PROGRAM_MANAGER_ID,ACCOUNT_NUMBER,ACCOUNT_TYPE,AVAILABLE_BALANCE,CURRENT_BALANCE,STATUS,CREATED_DATE,UPDATED_DATE,CREATED_BY,UPDATED_BY,TXN_NUMBER)
			VALUES(SEQ_PROGRAM_MANAGER_ACCOUNT_H.nextval,:new.ID,:new.PROGRAM_MANAGER_ID,:new.ACCOUNT_NUMBER,:new.ACCOUNT_TYPE,:new.AVAILABLE_BALANCE,:new.CURRENT_BALANCE,:new.STATUS,:new.CREATED_DATE,:new.UPDATED_DATE,:new.CREATED_BY,:new.UPDATED_BY,:new.LAST_TXN_NUMBER);
	END;
/

ALTER TRIGGER "PM_ACCOUNT_HISTORY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger PREAUTH_BALANCE_UPDATE
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "PREAUTH_BALANCE_UPDATE" 
AFTER INSERT
   ON PREAUTH_TRANSACTION
   FOR EACH ROW
   DECLARE 
   
     
   PREAUTHAMOUNT NUMBER(20,0) := :new.ONHOLD_PREAUTH_AMOUNT + :new.ISSUER_FEE;
   TXN_NUMBER NUMBER(20,0)  := :new.PREAUTH_REF_ID;
   PSTATUS varchar2(50) := :new.status;
   
  CUSTOMERACCOUNTID	  NUMBER(20,0);
  CUSTOMERID	        NUMBER(20,0);
  ACCOUNTNUMBER	      NUMBER(20,0);
  ACCOUNTPROGRAMID	  NUMBER(20,0);
  FEEPROGRAMID	      NUMBER(20,0);
  AVAILABLEBALANCE	  NUMBER(20,0);
  CURRENTBALANCE	    NUMBER(20,0);
  ACCOUNTSTATUS	      VARCHAR2(50 BYTE);
  ACCOUNTTYPE	        VARCHAR2(20 BYTE);
  LASTTRANSACTIONDATE	TIMESTAMP(6);
  ACCOUNTINACTIVEPERIOD	NUMBER(20,0);
  MAXBALANCELIMIT	      NUMBER(20,0);
  ACCOUNTCURRENCY	      VARCHAR2(255 BYTE);
  FREEATMCASHWITHDRAWAL	NUMBER(20,0);
  FREEACCTTOACCTTRASFER	NUMBER(20,0);
  FREEBALANCEINQUIRY	  NUMBER(20,0);
  FREEFUNDTRNSFRFROMBANK	NUMBER(20,0);
  FREEFUNDTRNSFRTOBANK	  NUMBER(20,0);
  FREELOADTXNTHROUGHAGENT	  NUMBER(20,0);
  FREEPOSTRANSACTION	    NUMBER(20,0);
  REASON	              VARCHAR2(250 BYTE);
  CREATEDDATE	          TIMESTAMP(6);
  UPDATEDDATE         	TIMESTAMP(6);
  CREATEDBY	            VARCHAR2(20);
  UPDATEDBY	            VARCHAR2(20);
  
   
BEGIN

    IF PSTATUS = 'AUTHORIZED'  THEN     
        
        UPDATE CUSTOMER_ACCOUNT SET AVAILABLE_BALANCE = (nvl(AVAILABLE_BALANCE,0)) - PREAUTHAMOUNT,UPDATED_DATE = sysdate,LAST_TXN_NUMBER = TXN_NUMBER
          WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID ;
          
        SELECT CUSTOMER_ACCOUNT_ID,CUSTOMER_ID,ACCOUNT_NUMBER,ACCOUNT_PROGRAM_ID,FEE_PROGRAM_ID,AVAILABLE_BALANCE,CURRENT_BALANCE,ACCOUNT_STATUS,ACCOUNT_TYPE,
        LAST_TRANSACTION_DATE,ACCOUNT_INACTIVE_PERIOD,MAX_BALANCE_LIMIT,ACCOUNT_CURRENCY,FREE_ATM_CASH_WITHDRAWAL,FREE_ACCT_TO_ACCT_TRASFER,FREE_BALANCE_INQUIRY,
        FREE_FUND_TRNSFR_FROM_BANK,FREE_FUND_TRNSFR_TO_BANK,FREE_LOAD_TXN_THROUGH_AGENT,FREE_POS_TRANSACTION,REASON,CREATED_DATE,UPDATED_DATE,CREATED_BY,UPDATED_BY
          INTO CUSTOMERACCOUNTID,CUSTOMERID,ACCOUNTNUMBER,ACCOUNTPROGRAMID,FEEPROGRAMID,AVAILABLEBALANCE,CURRENTBALANCE,ACCOUNTSTATUS,ACCOUNTTYPE,LASTTRANSACTIONDATE,
          ACCOUNTINACTIVEPERIOD,MAXBALANCELIMIT,ACCOUNTCURRENCY,FREEATMCASHWITHDRAWAL,FREEACCTTOACCTTRASFER,FREEBALANCEINQUIRY,FREEFUNDTRNSFRFROMBANK,FREEFUNDTRNSFRTOBANK,
          FREELOADTXNTHROUGHAGENT,FREEPOSTRANSACTION,REASON,CREATEDDATE,UPDATEDDATE,CREATEDBY,UPDATEDBY
          FROM CUSTOMER_ACCOUNT WHERE CUSTOMER_ACCOUNT_ID = :new.ACCOUNT_ID;          
          
        INSERT INTO CUSTOMER_ACCOUNT_H (CUSTOMER_HISTORY_ID,CUSTOMER_ACCOUNT_ID,CUSTOMER_ID,ACCOUNT_NUMBER,ACCOUNT_PROGRAM_ID,FEE_PROGRAM_ID,AVAILABLE_BALANCE,CURRENT_BALANCE,ACCOUNT_STATUS,ACCOUNT_TYPE,
        LAST_TRANSACTION_DATE,ACCOUNT_INACTIVE_PERIOD,MAX_BALANCE_LIMIT,ACCOUNT_CURRENCY,FREE_ATM_CASH_WITHDRAWAL,FREE_ACCT_TO_ACCT_TRASFER,FREE_BALANCE_INQUIRY,
        FREE_FUND_TRNSFR_FROM_BANK,FREE_FUND_TRNSFR_TO_BANK,FREE_LOAD_TXN_THROUGH_AGENT,FREE_POS_TRANSACTION,REASON,CREATED_DATE,UPDATED_DATE,CREATED_BY,UPDATED_BY,LAST_TXN_NUMBER)
          VALUES(SEQ_CUSTOMER_ACCOUNT_H.nextval,CUSTOMERACCOUNTID,CUSTOMERID,ACCOUNTNUMBER,ACCOUNTPROGRAMID,FEEPROGRAMID,AVAILABLEBALANCE,CURRENTBALANCE,ACCOUNTSTATUS,ACCOUNTTYPE,LASTTRANSACTIONDATE,
          ACCOUNTINACTIVEPERIOD,MAXBALANCELIMIT,ACCOUNTCURRENCY,FREEATMCASHWITHDRAWAL,FREEACCTTOACCTTRASFER,FREEBALANCEINQUIRY,FREEFUNDTRNSFRFROMBANK,FREEFUNDTRNSFRTOBANK,
          FREELOADTXNTHROUGHAGENT,FREEPOSTRANSACTION,REASON,CREATEDDATE,UPDATEDDATE,CREATEDBY,UPDATEDBY,TXN_NUMBER);
          
         INSERT INTO PREAUTH_TRANSACTION_H (ID,HISTORY_ID,ACCOUNT_ID,PAN,PREAUTH_REF_ID,ORIGINAL_PREAUTH_AMOUNT,ONHOLD_PREAUTH_AMOUNT,ACQUIRER_FEE,ISSUER_FEE,GRATUITY_AMOUNT,
         HOLD_EXPIRATION_DATE,ISOMESSAGE_ID,PREAUTH_TXN_TYPE,DE11_STAN,DE12_TXN_TIME,DE13_TXN_DATE,DE32_AQUIRER_ID,DE37_RRN,DE38_AUTH_ID,DE48_MERCHANT_NAME,
         DE111_PRIVATEACQ,MULTI_SETTLEMENT_AMOUNT,MULTI_SETTLEMENT_COUNT,MULTI_SETTLEMENT_SEQUENCE,STATUS,AUTH_RISK_STATUS,RELEASE_STATUS,RELEASE_BY,CREATED_DATE,UPDATED_DATE,
         CREATED_BY,UPDATED_BY)
         VALUES (SEQ_PREAUTH_TRANSACTION_H.nextval,:new.ID,:new.ACCOUNT_ID,:new.PAN,:new.PREAUTH_REF_ID,:new.ORIGINAL_PREAUTH_AMOUNT,:new.ONHOLD_PREAUTH_AMOUNT,
              :new.ACQUIRER_FEE,:new.ISSUER_FEE,:new.GRATUITY_AMOUNT,:new.HOLD_EXPIRATION_DATE,:new.ISOMESSAGE_ID,:new.PREAUTH_TXN_TYPE,
              :new.DE11_STAN,:new.DE12_TXN_TIME,:new.DE13_TXN_DATE,:new.DE32_AQUIRER_ID,:new.DE37_RRN,:new.DE38_AUTH_ID,:new.DE48_MERCHANT_NAME,:new.DE111_PRIVATEACQ,
              :new.MULTI_SETTLEMENT_AMOUNT,:new.MULTI_SETTLEMENT_COUNT,:new.MULTI_SETTLEMENT_SEQUENCE,:new.STATUS,:new.AUTH_RISK_STATUS,:new.RELEASE_STATUS,
              :new.RELEASE_BY,:new.CREATED_DATE,:new.UPDATED_DATE,:new.CREATED_BY,:new.UPDATED_BY);
                    
     END IF;
END;
/

ALTER TRIGGER "PREAUTH_BALANCE_UPDATE" ENABLE;


--------------------------------------------------------
--  DDL for Trigger CARD_HISTORY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "CARD_HISTORY" 
AFTER INSERT OR UPDATE
   ON CARD
   FOR EACH ROW
   DECLARE
   
	BEGIN
  
      INSERT INTO CARD_H (CARD_HISTORY_ID,CARD_ID,CARD_NUMBER,ACCOUNT_ID,CUSTOMER_ID,CARD_PROGRAM_ID,AGENT_ID,CARD_HOLDER_FIRST_NAME,CARD_HOLDER_LAST_NAME,CARD_HOLDER_DATE_OF_BIRTH,
      CARD_HOLDER_ADDRESS1,CARD_HOLDER_ADDRESS2,CARD_HOLDER_CITY,CARD_HOLDER_STATE,CARD_HOLDER_ZIP,CARD_HOLDER_COUNTRY,CARD_PERSONALIZE,CARD_PHOTO,EXPIRATION_DATE,PRIMARY_CARD,
      CARD_TYPE,CARD_EMBOSSED,CARD_BATCH,WRONG_PIN_COUNT,PIN_OFFSET,STATUS,REASON,SERIAL_NUMBER,CARD_TOKEN,TAV,ITAV,CARD_LOADED,
      ENABLE_CARD_DOWNLOAD,CARD_LAST_FOUR_DIGITS,CREATED_DATE,UPDATED_DATE,ACTIVATION_DATE,CREATED_BY,UPDATED_BY)
      VALUES(SEQ_CARD_H.nextval,:new.CARD_ID,:new.CARD_NUMBER,:new.ACCOUNT_ID,:new.CUSTOMER_ID,:new.CARD_PROGRAM_ID,:new.AGENT_ID,:new.CARD_HOLDER_FIRST_NAME,:new.CARD_HOLDER_LAST_NAME,:new.CARD_HOLDER_DATE_OF_BIRTH,
      	  :new.CARD_HOLDER_ADDRESS1,:new.CARD_HOLDER_ADDRESS2,:new.CARD_HOLDER_CITY,:new.CARD_HOLDER_STATE,:new.CARD_HOLDER_ZIP,:new.CARD_HOLDER_COUNTRY,:new.CARD_PERSONALIZE,:new.CARD_PHOTO,:new.EXPIRATION_DATE,:new.PRIMARY_CARD,
      	  :new.CARD_TYPE,:new.CARD_EMBOSSED,:new.CARD_BATCH,:new.WRONG_PIN_COUNT,:new.PIN_OFFSET,:new.STATUS,:new.REASON,:new.SERIAL_NUMBER,:new.CARD_TOKEN,:new.TAV,:new.ITAV,:new.CARD_LOADED,
      	  :new.ENABLE_CARD_DOWNLOAD,:new.CARD_LAST_FOUR_DIGITS,:new.CREATED_DATE,:new.UPDATED_DATE,:new.ACTIVATION_DATE,:new.CREATED_BY,:new.UPDATED_BY);
      
	END;
/

ALTER TRIGGER "CARD_HISTORY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger ADMIN_USER_HISTORY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "ADMIN_USER_HISTORY" 
AFTER INSERT OR UPDATE
   ON ADMIN_USER
   FOR EACH ROW
   DECLARE
   
	BEGIN
  
      INSERT INTO ADMIN_USER_H (ID,ADMIN_USER_ID,USER_ROLE_ID,ENTITY_ID,USERNAME,EMAIL, EMAIL_TOKEN,PASSWORD,
      USER_TYPE,FIRST_NAME,LAST_NAME,PHONE,PREVIOUS_PASSWORDS, LAST_PASSWORD_CHANGE,PASS_RETRY_COUNT,
      STATUS,LOGIN_MODE,SECURITY_QUESTION,SECURITY_ANSWER,REASON,CREATED_DATE,UPDATED_DATE, CREATED_BY,UPDATED_BY)
      
      VALUES(SEQ_ADMIN_USER_HISTORY.nextval,:new.ADMIN_USER_ID,:new.USER_ROLE_ID, :new.ENTITY_ID,:new.USERNAME,:new.EMAIL,:new.EMAIL_TOKEN,:new.PASSWORD,
      	  :new.USER_TYPE,:new.FIRST_NAME,:new.LAST_NAME,:new.PHONE,:new.PREVIOUS_PASSWORDS,:new.LAST_PASSWORD_CHANGE,:new.PASS_RETRY_COUNT,
      	  :new.STATUS,:new.LOGIN_MODE,:new.SECURITY_QUESTION,:new.SECURITY_ANSWER,:new.REASON, :new.CREATED_DATE,:new.UPDATED_DATE,:new.CREATED_BY,:new.UPDATED_BY);
      
	END;
/

ALTER TRIGGER "ADMIN_USER_HISTORY" ENABLE;

--------------------------------------------------------
--  DDL for Trigger AGENT_USER_HISTORY
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "AGENT_USER_HISTORY" 
AFTER INSERT OR UPDATE
   ON AGENT_USER
   FOR EACH ROW
   DECLARE
   
	BEGIN
  
      INSERT INTO Agent_User_H (ID,AGENT_USER_ID,AGENT_ID,ROLE_ID,AGENT_USER_LOGIN_NAME,FIRSTNAME,
      LASTNAME,EMAIL,CONTACT_NUMBER,USERTYPE,STATUS,REASON,PREVIOUS_PASSWORDS,LAST_PASSWORD_CHANGE,PASS_RETRY_COUNT,SECURITY_KEY,PASSWORD,LOGIN_MODE,SECURITY_QUESTION,
      SECURITY_ANSWER,CREATED_DATE,CREATED_BY,UPDATED_DATE,UPDATED_BY)
      VALUES(SEQ_AGENT_USER_HISTORY.nextval,:new.AGENT_USER_ID,:new.AGENT_ID,:new.ROLE_ID,:new.AGENT_USER_LOGIN_NAME,:new.FIRSTNAME,:new.LASTNAME,:new.EMAIL,:new.CONTACT_NUMBER,
      :new.USERTYPE,:new.STATUS,:new.REASON,:new.PREVIOUS_PASSWORDS,:new.LAST_PASSWORD_CHANGE,:new.PASS_RETRY_COUNT,:new.SECURITY_KEY,:new.PASSWORD,:new.LOGIN_MODE,:new.SECURITY_QUESTION,:new.SECURITY_ANSWER,:new.CREATED_DATE,:new.CREATED_BY,:new.UPDATED_DATE,:new.UPDATED_BY);
      
	END;
/

ALTER TRIGGER "AGENT_USER_HISTORY" ENABLE;